{#{% include "dep.tmpl" %}#}


@Injectable() 
export class {{ tag|capitalize }}Api {
    private basePath = '{{basePath}}'
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

     constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
{% for path in paths %} 
    public {{path['properties'].operationId}}( {% for param in path.parameters %}{{param}}, {% endfor %} extraHttpRequestParams?: any): Observable<{{path.response_200}}> {
        return this.{{path['properties'].operationId}}WithHttpInfo({% for param in path.parameters %}{{param}}, {% endfor %} extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }
{% endfor %}


{% for path in paths %}
    public {{path['properties'].operationId}}WithHttpInfo({% for param in path.parameters %}{{param}}, {% endfor %} extraHttpRequestParams?: any): Observable<Response> {
        {# need to fix basePath #}
        const path = this.basePath + {{path['url']}}

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON());
        {# need to add this for certain conditions}
        {# let formParams = new URLSearchParams(); #}

        {% for param in path.parameters %}
        {% if 'apiKey' in param %}
        if (apiKey !== undefined && apiKey !== null) {
            headers.set('api_key', String(apiKey));
        }
        {% elif '?' not in param %} {# not required #}
        {% set var = param.split(':') %}  
        if ({{var[0]}} === null || {{var[0]}} === undefined) {
            throw new Error('Required parameter {{param}} was null or undefined when calling {{path['properties'].operationId}}.');
        }
        
        {% if 'Array' in param %} {# check for array #}
        if ({{var[0]}}) {
            {{var[0]}}.forEach((element) => {
                queryParameters.append('{{var[0]}}', <any>element);
            })
        }    
        {% endif %}
        {% else %} {# required parameters #} 
        {% set var = param.split('?:') %}
        if ({{var[0]}} !== undefined) {
            formParams.set('{{var[0]}}', <any>{{var[0]}});
        }
        {% endif %}
        {% endfor %}
            
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/x-www-form-urlencoded');

        {# must add something inside based on accept content types #}
        let consumes: string[] = [
            ];

        {# may very per function #}
        let produces: string[] = [
            'application/json',
            'application/xml'
        ];
        
        if (this.configuration.apiKey) {
            headers.set('api_key', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.{{path['method']|capitalize}},
            headers: headers,
            {% for param in path.parameters %}{% if 'body' in param %}
            {# need and if else for different body parameters #}
                body: body == null ? '' : JSON.stringify(body), {% endif %}{% endfor %}
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    }

{% endfor %}

}
