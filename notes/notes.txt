syntax analysis
are you a properly formatted yaml and openapi

lex analysis
the dragon book compiler
meet and talk with rob about compilers stuff
looking at a reference that has to already exist

keep parsing the tree separate from codegen. You don't want to be traversing the tree to dump out code.
Possibly keep the tree readonly, because you don't want to end up having to guess whether the key/value in the tree is the same as the original
End up with an object model (classes) that is good enough to the point where we don't need the spec, and we can get the spec from our IR
Instead of having a top-level function that parses a modified tree and understands all the context, 
we can have the individual object models (essentially representing a subtree) have their own functions that understand enough context to generate its relevant code

The linking/dependency problem:
  ex. a Pet instance of class Schema contains a Category instance of class Schema 
  '#/components/schema/Pet'
  The work is done for us already here. As long as we know where to look once we reach this, we should not do additional work

things to be cautious about: if you're making your objects and parsing your objects, and
it feels like you're just wrapping your tree, question why you need to do it in the first place.
Think about the different parts of the server. Each class needs to be able to store these references
One you have the live objects, emit templates from the intermediate representation, and you don't have to go back to the tree
If needed, consider a metaclass that understands which objects are in play and manages objects. If you do this, unit test the reference creations
Once you get a bug, write a unit test for it.

This is a compiler problem, and lexical analysis is what we're essentially doing. Syntax analysis has already been done for us (validator)
WRITE UNIT TESTS or else we're kinda doomed in the long run
example unit test: if we have a link list, test for size zero at instantiation



might want to do a first pass to verify references? but this is mostly already done for us

think about different parts of the server. each class needs

be able to store these references
once we have all the live objects

emit templates from IR
don't have to go back to the tree

don't want to be traversing the tree to dump out code
don't want those process

separate parsing from codegen for sure

wary: if you're making your objects and parsing your objects, and you feel like you're wrapping your tree, then question if you need to do it i the first place

unit test everything
instantiate a linked list, check size zero

maybe metaclass that understands which objects are in play and manages objectsunit test reference creations

unittest: get a bug, something fails, now have a unit test.